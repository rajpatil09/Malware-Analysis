import re
import glob as gb
import collections

class opCodes:
	trainlabels = {}
	def __init__(self, p, nm, lbls, resfile):
		self.path = p
		self.nmfile = nm
		self.lblfile = lbls 
		self.featureStatsFile = resfile
		self.linecnt = 0
		self.filecnt = 0
		self.opfrequency = {} 
		self.currentFile=""

		fl = open(self.lblfile,'r')
		for label in fl:
			label = label.replace("\"","")
			label = label.rstrip('\n')
			keyval = label.split(",")
			opCodes.trainlabels[keyval[0]] = keyval[1]
		fl.close()

	def getLabel(self, file):	
		wrds = file.split('/')
		cnt = len(wrds)
		mwfile = wrds[cnt-1]
		extn = mwfile.split(".")
		self.currentFile = extn[0].strip()
		lbl = opCodes.trainlabels.get(self.currentFile)
		jstlbl = lbl
		lbl += "," + self.currentFile		
		self.featurevals += lbl
		features = self.featurevals.split(",")
		self.featurevals += ","+ str(len(features)+1)
		print('#File-cnt::', self.filecnt,'    #File-Name::', self.currentFile,'    #File-Label::', jstlbl,'    #FeatureCount::', str(len(features)+1))
	

	def sortDict(self, file):
		self.opfrequency = collections.OrderedDict(sorted(self.opfrequency.items(), key=lambda t: t[0]))#, reverse=True))
		self.featurevals=""
			 
		for k,v in self.opfrequency.items():
			#print(k,'<<>>',v)
			self.featurevals += str(v)+","
		
		self.getLabel(file)
		self.outputFile()


	def outputFile(self):		
		fw = open(self.featureStatsFile,'a')
		#self.featurevals = self.featurevals[0:(len(self.featurevals)-1)]
		fw.write('\n')
		fw.write(self.featurevals)
		fw.close()
		

	def processFiles(self):
		for file in gb.glob(self.path+"*.asm"):
			file = file.replace("\\","/")
			self.linecnt = 0
			self.filecnt+= 1
			self.currentFile = file
			self.initalizeNemonics()
			self.getOpCount(file)
			self.sortDict(file)			

			#if(self.filecnt == 1):
				#break

		print('#Files processed:',self.filecnt)		


	def initalizeNemonics(self):
		self.opfrequency = {}
		f = open(self.nmfile, "r")
		for nmcode in f:
			if(nmcode):
				self.opfrequency[nmcode] = 0
		f.close()
		

	def getOpCount(self, filename):
		try:
			fp = open(filename, "r", encoding = "ISO-8859-1")
			cnt = 0
			fileContent=""
			for line in fp:
				self.linecnt += 1
				line = line.replace("\t"," ")
				#print('line:',self.linecnt)
				words = line.split(" ")
				for word in words:
					if(word):
						if(word in self.opfrequency):
							self.opfrequency[word] +=1
						
			
			fp.close()
			
		except Exception as e:
			print("Ex::",e)
	
				