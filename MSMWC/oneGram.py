import glob as gb
import collections

class oneGram:

	trainlabels = {}
	
	def __init__(self, p, lbls, resfile):
		self.path = p
		self.lblfile = lbls 
		self.featureStatsFile=resfile
		self.filecnt = 0
		self.linecnt = 0
		self.featurevals=""
		self.wordFrequency = {}
		
		fl = open(self.lblfile,'r')
		lc = 0
		for label in fl:
			label = label.replace("\"","")
			label = label.rstrip('\n')
			keyval = label.split(",")
			oneGram.trainlabels[keyval[0]] = keyval[1]
		fl.close()
		
	def getLabel(self, file):	
		wrds = file.split('/')
		cnt = len(wrds)
		mwfile = wrds[cnt-1]
		extn = mwfile.split(".")
		mwfile = extn[0].strip()
		lbl = oneGram.trainlabels.get(mwfile)
		jstlbl = lbl
		lbl += "," + mwfile		
		self.featurevals += lbl
		features = self.featurevals.split(",")
		self.featurevals += ","+ str(len(features)+1)
		print('#File-cnt::', self.filecnt,'    #File-Name::', mwfile,'    #File-Label::', jstlbl,'    #FeatureCount::', str(len(features)+1))
	
	
	def printFileAnalysis(self, file):
		self.wordFrequency = collections.OrderedDict(sorted(self.wordFrequency.items(), key=lambda t: t[0]))#, reverse=True))
		self.featurevals=""
			 
		for k,v in self.wordFrequency.items():
			#print(k,'<<>>',v)
			self.featurevals += str(v)+","
		
		self.getLabel(file)
		self.outputFile()
	
	def outputFile(self):		
		fw = open(self.featureStatsFile,'a')
		#self.featurevals = self.featurevals[0:(len(self.featurevals)-1)]
		fw.write('\n')
		fw.write(self.featurevals)
		fw.close()
		
		
	def getHexDigits(self):
		self.wordFrequency = {}
		for i in range(0, 256):
			hexnum = "{:02x}".format(i).upper()
			key = str(hexnum)
			self.wordFrequency[key] = 0
		self.wordFrequency["??"] = 0
		
	def processFiles(self):
		for file in gb.glob(self.path+"*.bytes"):
			self.filecnt += 1
			self.linecnt = 0
			file = file.replace("\\","/")
			self.getHexDigits()
			self.getGrams(file)
			self.printFileAnalysis(file)
			#if(self.filecnt == 10):
			#	break
				

	def getGrams(self, fileName):
		fp = open(fileName,'rb')
		cnt = 0
		#fileContent=""
		for content in fp:
			self.linecnt += 1
			line = content.decode("utf-8")
			#print('Before<-->',line)
			line = line.split(" ",1)
			line = line[1].replace('\r','')
			line = line.rstrip('\n')
			#print('After<-->',line,'\n')
			#fileContent+=line
			words = line.split(" ")
			for word in words:
				if(word in self.wordFrequency):
					self.wordFrequency[word] +=1
				else:
					self.wordFrequency[word] = 1
		fp.close()
	
	