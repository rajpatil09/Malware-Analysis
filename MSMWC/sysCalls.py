import re
import sys
import glob as gb
import copy

class sysCalls:
	trainlabels = {}
	def __init__(self, p, lbls, resfile):
		self.path = p
		self.lblfile = lbls 
		self.featureStatsFile = resfile
		self.linecnt = 0
		self.filecnt = 0
		self.syslabels = set({}) 
		self.flag = False
		self.callFrequency={}
		self.baseFrequency={}
		
		self.intializeFrequency()
		self.loadLabels()


	def intializeFrequency(self):
		f = open(self.featureStatsFile, "r")
		line = f.readline();
		f.close()
		calls = line.split(",")
		for call in calls:
			call = call.strip()
			if(call in self.baseFrequency):
				print(call,' already exist')
			if(call != ""):
				self.baseFrequency[call] = 0
		print('baseFrequency-len:',len(self.baseFrequency))

	def loadLabels(self):
		fl = open(self.lblfile,'r')
		fl.readline()
		for line in fl:
			line = line.replace("\"","")
			line = line.rstrip('\n')
			keyval = line.split(",")
			sysCalls.trainlabels[keyval[0]] = keyval[1]
		fl.close()


	def getFileName(self, file):
		wrds = file.split('/')
		return wrds[len(wrds)-1]


	def getLabel(self, file):	
		wrds = file.split('/')
		cnt = len(wrds)
		mwfile = wrds[cnt-1]
		extn = mwfile.split(".")
		mwfile = extn[0].strip()
		lbl = sysCalls.trainlabels.get(mwfile)
		jstlbl = lbl
		lbl += "," + mwfile		
		self.featurevals += lbl
		features = self.featurevals.split(",")
		self.featurevals += ","+ str(len(features)+1)
		print('#File-cnt::', self.filecnt,'    #File-Name::', mwfile,'    #File-Label::', jstlbl,'    #FeatureCount::', str(len(features)+1))
	
	
	def printFileAnalysis(self, file):
		self.featurevals=""
		#print('callFrequency-len:',len(self.callFrequency))
		for k,v in self.callFrequency.items():
			#print(k,'<<>>',v)
			if ((k != "label") and (k != "fileName") and(k != "featureCount")): 
				self.featurevals += str(v)+","
		self.getLabel(file)
		self.outputFile()


	def outputFile(self):		
		fw = open(self.featureStatsFile,'a')
		#self.featurevals = self.featurevals[0:(len(self.featurevals)-1)]
		fw.write('\n')
		fw.write(self.featurevals)
		fw.close()


	def processFiles(self):
		for file in gb.glob(self.path+"*.asm"):
			file = file.replace("\\","/")
			self.linecnt = 0
			self.filecnt+= 1
			self.flag = False
			self.currentFile = self.getFileName(file)
			
			self.getsysCounts(file)
			self.printFileAnalysis(file)
				
			#self.getsysCalls(file)
			#if(self.filecnt == 5):
			#	break

		#self.outputLabels()	

		print('#Files processed:',self.filecnt)		

		
	def outputLabels(self):		
		fw = open(self.featureStatsFile,'a', encoding='ISO-8859-1')#utf-8')
		
		self.syslabels = sorted(self.syslabels)
		
		line = ""
		for items in self.syslabels:
			#print("--",items,"--")
			line += items+","
		
		fw.write(line+"\n")
		fw.close()


	def getsysCounts(self, filename):
		#self.callFrequency = {}
		self.callFrequency = copy.deepcopy(self.baseFrequency)
		f = open(filename, "r", encoding = "ISO-8859-1")
		try:
			for line in f:
				self.linecnt += 1		

				#calls = re.findall('\\s__.*\\s.*\\(.*\\)',line)				
				regex1 = re.compile('\\s(__stdcall|__cdecl|__clrcall|__fastcall|__thiscall|__vectorcall)(.*)(\\(.*\\))')
				calls = regex1.findall(line)
				
				if calls:
					syslbl = calls[0][1].strip()
					if(syslbl.find(":")!=-1):
						begininx = syslbl.rfind(":")+1
						endinx = len(syslbl)-1	
						syslbl = syslbl[begininx:endinx]
							
					if((syslbl.find("(")==-1) and (syslbl.find(" ")==-1)):	
						if((len(syslbl)>2) and (syslbl in self.callFrequency)):
							self.callFrequency[syslbl] +=1
		except Exception as e:
			print("Ex::",e)
	


	def getsysCalls(self, filename):
		
		f = open(filename, "r", encoding = "ISO-8859-1")
		try:
			for line in f:
				self.linecnt += 1		

				#calls = re.findall('\\s__.*\\s.*\\(.*\\)',line)				
				regex1 = re.compile('\\s(__stdcall|__cdecl|__clrcall|__fastcall|__thiscall|__vectorcall)(.*)(\\(.*\\))')
				calls = regex1.findall(line)
				
				if calls:
					syslbl = calls[0][1].strip()
					if(syslbl.find(":")!=-1):
						begininx = syslbl.rfind(":")+1
						endinx = len(syslbl)-1	
						syslbl = syslbl[begininx:endinx]
							
					if((syslbl.find("(")==-1) and (syslbl.find(" ")==-1)):	
						if((len(syslbl)>2) and (syslbl not in self.syslabels)):
							self.syslabels.add(syslbl)
							self.flag = True
							print('#LABEL:',syslbl,', CurrentFile:',self.currentFile,',  FileCnt:',self.filecnt,',  LineCnt:',self.linecnt,',  SysLabels:', len(self.syslabels))	
				
		except Exception as e:
			print("Ex::",e)
	
